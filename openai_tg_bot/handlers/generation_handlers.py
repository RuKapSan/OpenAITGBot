from aiogram import Router, F, Bot
from aiogram.types import Message, ContentType, BufferedInputFile
from aiogram.fsm.context import FSMContext

from ..states import ImageGenerationStates
from ..config import TEST_MODE, logger, GENERATION_PRICE
from ..services.payment_service import payment_service
from ..services.telegram_service import download_image
from ..services.openai_service import generate_image

generation_router = Router()


@generation_router.message(ImageGenerationStates.waiting_for_prompt, F.content_type == ContentType.TEXT)
async def handle_prompt(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞"""
    prompt = message.text.strip()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–∞
    if len(prompt) > 1000:
        await message.answer(
            f"‚ùå –ü—Ä–æ–º–ø—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π!\n"
            f"–ú–∞–∫—Å–∏–º—É–º: 1000 —Å–∏–º–≤–æ–ª–æ–≤\n"
            f"–í–∞—à –ø—Ä–æ–º–ø—Ç: {len(prompt)} —Å–∏–º–≤–æ–ª–æ–≤"
        )
        return
    
    if len(prompt) < 3:
        await message.answer("‚ùå –ü—Ä–æ–º–ø—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞.")
        return
    
    await state.update_data(prompt=prompt)
    
    data = await state.get_data()
    images = data.get('images', [])
    images_count = len(images)
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
        session_id = await payment_service.create_session(
            message.from_user.id, 
            images, 
            prompt
        )
        await state.update_data(session_id=session_id)
        
        if TEST_MODE:
            # –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º - —Å—Ä–∞–∑—É –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
            await message.answer(
                "üß™ <b>–¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú</b>\n"
                "–û–ø–ª–∞—Ç–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!",
                parse_mode="HTML"
            )
            await process_generation(message, state, session_id)
        else:
            # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–ø–ª–∞—Ç–µ
            await state.set_state(ImageGenerationStates.waiting_for_payment)
            await payment_service.create_invoice(
                message, 
                session_id, 
                prompt, 
                images_count
            )
    
    except ValueError as e:
        await message.answer(f"‚ùå {str(e)}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@generation_router.message(F.successful_payment)
async def process_successful_payment(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
    payment = message.successful_payment
    session_id = payment.invoice_payload
    payment_charge_id = payment.telegram_payment_charge_id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
    await payment_service.save_payment(
        session_id=session_id,
        user_id=message.from_user.id,
        payment_charge_id=payment_charge_id,
        amount=GENERATION_PRICE
    )
    
    await message.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞!")
    await process_generation(message, state, session_id)


async def process_generation(message: Message, state: FSMContext, session_id: str):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    session = await payment_service.get_session(session_id)
    if not session:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        await state.clear()
        return
    
    await message.answer(
        "‚úÖ –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...\n"
        "üé® –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 30-60 —Å–µ–∫—É–Ω–¥"
    )
    
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å
        input_images = []
        if session['images']:
            for file_id in session['images']:
                img_bytes = await download_image(message.bot, file_id)
                input_images.append(img_bytes)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        result_image = await generate_image(session['prompt'], input_images)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await message.answer_photo(
            photo=BufferedInputFile(result_image, filename="generated.png"),
            caption=(
                f"‚ú® <b>–ì–æ—Ç–æ–≤–æ!</b>\n\n"
                f"<b>–ü—Ä–æ–º–ø—Ç:</b> {session['prompt']}\n\n"
                f"<i>{'üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º' if TEST_MODE else '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!'}</i>"
            ),
            parse_mode="HTML"
        )
        
        # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
        await payment_service.delete_session(session_id)
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}: {e}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤–æ–∑–≤—Ä–∞—Ç–æ–º
        if not TEST_MODE and session.get('payment_charge_id'):
            await payment_service.process_payment_error(
                message.bot,
                message,
                session_id,
                e
            )
        else:
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
        
        await state.clear()

@generation_router.message(ImageGenerationStates.waiting_for_prompt)
async def wrong_content_prompt(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –ø—Ä–æ–º–ø—Ç–∞"""
    await message.answer(
        "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ"
    )