import asyncio
import logging
import base64
import json
from io import BytesIO
from typing import List, Optional
from datetime import datetime

from aiogram import Bot, Dispatcher, F, Router
from aiogram.filters import Command
from aiogram.types import (
    Message, 
    PreCheckoutQuery, 
    LabeledPrice,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    CallbackQuery,
    ContentType,
    FSInputFile,
    BufferedInputFile
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

import aiohttp
from openai import AsyncOpenAI
from PIL import Image
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

if not BOT_TOKEN or not OPENAI_API_KEY:
    raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å BOT_TOKEN –∏ OPENAI_API_KEY –≤ .env —Ñ–∞–π–ª–µ")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()

# OpenAI –∫–ª–∏–µ–Ω—Ç
openai_client = AsyncOpenAI(api_key=OPENAI_API_KEY)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class ImageGenStates(StatesGroup):
    waiting_for_images = State()
    waiting_for_prompt = State()
    waiting_for_payment = State()

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π (–≤–º–µ—Å—Ç–æ –ë–î)
generation_sessions = {}

# –¶–µ–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
GENERATION_PRICE = 20  # Stars

# –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º (set to True to skip payment)
TEST_MODE = os.getenv("TEST_MODE", "true").lower() == "true"

@router.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await message.answer(
        "üé® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π!\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –º–æ–∂–µ—Ç:\n"
        "‚Ä¢ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –æ–ø–∏—Å–∞–Ω–∏—é\n"
        "‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏\n\n"
        "üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: 20 Stars –∑–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/generate - –ù–∞—á–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é\n"
        "/help - –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"
    )

@router.message(Command("help"))
async def cmd_help(message: Message):
    """–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"""
    await message.answer(
        "üìñ <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç:</b>\n\n"
        "1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ /generate\n"
        "2Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç 1 –¥–æ 3 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)\n"
        "3Ô∏è‚É£ –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≥–æ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å\n"
        "4Ô∏è‚É£ –û–ø–ª–∞—Ç–∏—Ç–µ 20 Stars\n"
        "5Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!\n\n"
        "<b>–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–æ–º–ø—Ç–æ–≤:</b>\n"
        "‚Ä¢ \"–°–¥–µ–ª–∞–π —Ñ–æ—Ç–æ –≤ —Å—Ç–∏–ª–µ –∞–Ω–∏–º–µ\"\n"
        "‚Ä¢ \"–î–æ–±–∞–≤—å –∫–æ—Å–º–∏—á–µ—Å–∫–∏–π —Ñ–æ–Ω\"\n"
        "‚Ä¢ \"–û–±—ä–µ–¥–∏–Ω–∏ —ç—Ç–∏ —Ñ–æ—Ç–æ –≤ –æ–¥–Ω—É –∫–æ–º–ø–æ–∑–∏—Ü–∏—é\"\n"
        "‚Ä¢ \"–ù–∞—Ä–∏—Å—É–π –∫–æ—Ç–∞ –≤ –∫–æ—Å—Ç—é–º–µ –∞—Å—Ç—Ä–æ–Ω–∞–≤—Ç–∞\"\n\n"
        "<i>üí° –ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, —Ç–µ–º –ª—É—á—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!</i>",
        parse_mode="HTML"
    )

@router.message(Command("generate"))
async def cmd_generate(message: Message, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    await state.clear()
    await state.set_state(ImageGenStates.waiting_for_images)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–∏—Å–∞–Ω–∏—é ‚û°Ô∏è", callback_data="skip_images")]
    ])
    
    await message.answer(
        "üñº –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç 1 –¥–æ 3 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.\n\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –Ω—É–ª—è:",
        reply_markup=keyboard
    )

@router.callback_query(F.data == "skip_images")
async def skip_images(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    await callback.answer()
    await state.set_state(ImageGenStates.waiting_for_prompt)
    await callback.message.edit_text(
        "‚úçÔ∏è –¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ, –∫–∞–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å.\n\n"
        "–ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, —Ç–µ–º –ª—É—á—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!"
    )

@router.message(ImageGenStates.waiting_for_images, F.content_type == ContentType.PHOTO)
async def handle_photo(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ"""
    data = await state.get_data()
    images = data.get('images', [])
    
    # –ü–æ–ª—É—á–∞–µ–º file_id —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–æ—Ç–æ
    photo = message.photo[-1]
    images.append(photo.file_id)
    
    await state.update_data(images=images)
    
    if len(images) >= 3:
        await state.set_state(ImageGenStates.waiting_for_prompt)
        await message.answer(
            f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–º–∞–∫—Å–∏–º—É–º).\n\n"
            "‚úçÔ∏è –¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å —ç—Ç–∏–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏:"
        )
    else:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text=f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å {len(images)} —Ñ–æ—Ç–æ ‚û°Ô∏è", 
                callback_data="continue_to_prompt"
            )]
        ])
        await message.answer(
            f"üì∏ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(images)}/3 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.\n"
            "–ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å:",
            reply_markup=keyboard
        )

@router.callback_query(F.data == "continue_to_prompt")
async def continue_to_prompt(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ–π—Ç–∏ –∫ –≤–≤–æ–¥—É –ø—Ä–æ–º–ø—Ç–∞"""
    await callback.answer()
    await state.set_state(ImageGenStates.waiting_for_prompt)
    await callback.message.edit_text(
        "‚úçÔ∏è –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å —ç—Ç–∏–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏:"
    )

@router.message(ImageGenStates.waiting_for_prompt, F.content_type == ContentType.TEXT)
async def handle_prompt(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞"""
    prompt = message.text
    await state.update_data(prompt=prompt)
    
    data = await state.get_data()
    images_count = len(data.get('images', []))
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
    session_id = f"{message.from_user.id}_{int(datetime.now().timestamp())}"
    generation_sessions[session_id] = {
        'user_id': message.from_user.id,
        'images': data.get('images', []),
        'prompt': prompt,
        'status': 'pending'
    }
    
    await state.update_data(session_id=session_id)
    
    if TEST_MODE:
        # –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º - —Å—Ä–∞–∑—É –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
        await message.answer(
            "üß™ <b>–¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú</b>\n"
            "–û–ø–ª–∞—Ç–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!",
            parse_mode="HTML"
        )
        await process_generation(message, state, session_id)
    else:
        # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º - –∑–∞–ø—Ä–æ—Å –æ–ø–ª–∞—Ç—ã
        await state.set_state(ImageGenStates.waiting_for_payment)
        
        await bot.send_invoice(
            chat_id=message.chat.id,
            title="–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
            description=f"–ü—Ä–æ–º–ø—Ç: {prompt[:50]}{'...' if len(prompt) > 50 else ''}\n"
                       f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {images_count}",
            payload=session_id,
            provider_token="",
            currency="XTR",
            prices=[
                LabeledPrice(label="–ì–µ–Ω–µ—Ä–∞—Ü–∏—è", amount=GENERATION_PRICE)
            ],
            photo_url="https://cdn-icons-png.flaticon.com/512/2779/2779775.png",
            photo_width=512,
            photo_height=512
        )

@router.pre_checkout_query()
async def process_pre_checkout(pre_checkout_query: PreCheckoutQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø—Ä–∏–Ω—è—Ç—å –ø–ª–∞—Ç–µ–∂"""
    session_id = pre_checkout_query.invoice_payload
    
    if session_id not in generation_sessions:
        await bot.answer_pre_checkout_query(
            pre_checkout_query_id=pre_checkout_query.id,
            ok=False,
            error_message="–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ."
        )
        return
    
    await bot.answer_pre_checkout_query(
        pre_checkout_query_id=pre_checkout_query.id,
        ok=True
    )

async def download_image(file_id: str) -> bytes:
    """–°–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ Telegram"""
    file = await bot.get_file(file_id)
    file_path = file.file_path
    
    async with aiohttp.ClientSession() as session:
        async with session.get(f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file_path}") as resp:
            return await resp.read()

async def generate_image(prompt: str, input_images: List[bytes] = None) -> bytes:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ OpenAI API"""
    try:
        if input_images:
            # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—Ö–æ–¥–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ base64
            base64_images = []
            for img_bytes in input_images:
                base64_images.append(base64.b64encode(img_bytes).decode('utf-8'))
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            files = []
            for i, img_bytes in enumerate(input_images):
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ –¥–ª—è API
                temp_path = f"temp_image_{i}.png"
                with open(temp_path, 'wb') as f:
                    f.write(img_bytes)
                files.append(open(temp_path, 'rb'))
            
            try:
                response = await openai_client.images.edit(
                    model="gpt-image-1",
                    image=files[0] if len(files) == 1 else files,
                    prompt=prompt,
                    n=1,
                    size="1024x1024",
                    quality="high",
                    background="auto"
                )
            finally:
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã –∏ —É–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ
                for i, f in enumerate(files):
                    f.close()
                    os.remove(f"temp_image_{i}.png")
        else:
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –Ω—É–ª—è
            response = await openai_client.images.generate(
                model="gpt-image-1",
                prompt=prompt,
                quality="high",
                output_format="jpeg"
            )
        
        # –ü–æ–ª—É—á–∞–µ–º base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image_base64 = response.data[0].b64_json
        return base64.b64decode(image_base64)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        raise

async def process_generation(message: Message, state: FSMContext, session_id: str):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    session = generation_sessions.get(session_id)
    if not session:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    await message.answer(
        "‚úÖ –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...\n"
        "üé® –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 30-60 —Å–µ–∫—É–Ω–¥"
    )
    
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å
        input_images = []
        if session['images']:
            for file_id in session['images']:
                img_bytes = await download_image(file_id)
                input_images.append(img_bytes)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        result_image = await generate_image(session['prompt'], input_images)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await message.answer_photo(
            photo=BufferedInputFile(result_image, filename="generated.png"),
            caption=(
                f"‚ú® <b>–ì–æ—Ç–æ–≤–æ!</b>\n\n"
                f"<b>–ü—Ä–æ–º–ø—Ç:</b> {session['prompt']}\n\n"
                f"<i>{'üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º' if TEST_MODE else '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!'}</i>"
            ),
            parse_mode="HTML"
        )
        
        # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
        generation_sessions.pop(session_id, None)
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.\n"
            f"–û—à–∏–±–∫–∞: {str(e)}"
        )

@router.message(F.successful_payment)
async def process_successful_payment(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
    payment = message.successful_payment
    session_id = payment.invoice_payload
    
    await message.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞!")
    await process_generation(message, state, session_id)

@router.message(ImageGenStates.waiting_for_images)
async def wrong_content_images(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    await message.answer(
        "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'"
    )

@router.message(ImageGenStates.waiting_for_prompt)
async def wrong_content_prompt(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –ø—Ä–æ–º–ø—Ç–∞"""
    await message.answer(
        "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ"
    )

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä
    dp.include_router(router)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())