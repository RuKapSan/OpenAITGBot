from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext

from ..states import ImageGenerationStates
from ..config import logger, ADMIN_ID, GENERATION_PRICE, MAX_IMAGES_PER_REQUEST
from ..services import payment_service, balance_service
from .. import messages

command_router = Router()

@command_router.message(Command("start"))
async def start_command(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await message.answer(
        messages.START_MESSAGE.format(price=GENERATION_PRICE)
    )

@command_router.message(Command("help"))
async def help_command(message: Message) -> None:
    """–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"""
    await message.answer(
        messages.HELP_MESSAGE.format(
            max_images=MAX_IMAGES_PER_REQUEST,
            price=GENERATION_PRICE
        ),
        parse_mode="HTML"
    )

@command_router.message(Command("generate"))
async def generate_command(message: Message, state: FSMContext) -> None:
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    await state.clear()
    await state.set_state(ImageGenerationStates.waiting_for_prompt)
    
    from ..keyboards.package_keyboards import get_reset_keyboard
    
    await message.answer(
        messages.GENERATE_START_UNIFIED.format(max_images=MAX_IMAGES_PER_REQUEST),
        parse_mode="HTML",
        reply_markup=get_reset_keyboard()
    )


@command_router.message(Command("balance"))
async def balance_command(message: Message) -> None:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–π"""
    user_balance = await balance_service.get_balance(message.from_user.id)
    
    if user_balance > 0:
        await message.answer(
            f"üíé <b>–í–∞—à –±–∞–ª–∞–Ω—Å</b>\n\n"
            f"–î–æ—Å—Ç—É–ø–Ω–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {user_balance}\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /generate –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
            parse_mode="HTML"
        )
    else:
        await message.answer(
            f"üíé <b>–í–∞—à –±–∞–ª–∞–Ω—Å</b>\n\n"
            f"–î–æ—Å—Ç—É–ø–Ω–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: 0\n\n"
            f"–î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å.\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /generate –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–∞–∫–µ—Ç.",
            parse_mode="HTML"
        )


@command_router.message(Command("paysupport"))
async def cmd_paysupport(message: Message) -> None:
    """–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ –ø–ª–∞—Ç–µ–∂–∞–º"""
    await message.answer(
        messages.PAYMENT_SUPPORT_MESSAGE,
        parse_mode="HTML"
    )


@command_router.message(Command("refund"))
async def cmd_refund(message: Message) -> None:
    """–†—É—á–Ω–æ–π –≤–æ–∑–≤—Ä–∞—Ç –ø–ª–∞—Ç–µ–∂–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if message.from_user.id != ADMIN_ID:
        await message.answer(messages.REFUND_NO_PERMISSION)
        return
    
    args = message.text.split()
    if len(args) != 3:
        await message.answer(messages.REFUND_USAGE)
        return
    
    try:
        user_id = int(args[1])
        payment_charge_id = args[2]
        
        success, msg = await payment_service.refund_payment(
            message.bot,
            user_id, 
            payment_charge_id
        )
        
        if success:
            await message.answer(messages.REFUND_SUCCESS.format(message=msg))
        else:
            await message.answer(messages.REFUND_ERROR.format(message=msg))
            
    except ValueError:
        await message.answer(messages.REFUND_INVALID_USER_ID)
    except (AttributeError, TypeError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä—É—á–Ω–æ–º –≤–æ–∑–≤—Ä–∞—Ç–µ: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã")


@command_router.message(F.text == "üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ")
async def reset_state(message: Message, state: FSMContext) -> None:
    """–°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –Ω–∞—á–∞–ª–æ –∑–∞–Ω–æ–≤–æ"""
    await state.clear()
    await message.answer(
        "‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /generate –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.",
        reply_markup=ReplyKeyboardRemove()
    )