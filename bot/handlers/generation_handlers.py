from aiogram import Router, F, Bot
from aiogram.types import Message, ContentType, BufferedInputFile, CallbackQuery
from aiogram.fsm.context import FSMContext

from ..states import ImageGenerationStates
from ..config import TEST_MODE, logger, GENERATION_PRICE, MAX_PROMPT_LENGTH, OPENAI_CONCURRENT_LIMIT, MAX_IMAGES_PER_REQUEST
from ..services import payment_service, balance_service
from ..services.telegram_service import download_image
from ..services.openai_service import generate_image, GenerationError, generation_semaphore
from ..services import queue_service
from ..keyboards.package_keyboards import get_package_keyboard
from .. import messages

generation_router = Router()


@generation_router.message(ImageGenerationStates.waiting_for_prompt, F.content_type == ContentType.PHOTO)
async def handle_photo_only(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞"""
    data = await state.get_data()
    images = data.get('images', [])
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
    photo = message.photo[-1]
    images.append(photo.file_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ caption (—Ç–µ–∫—Å—Ç —Å —Ñ–æ—Ç–æ)
    if message.caption:
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –ø–æ–ª–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        await state.update_data(images=images)
        await handle_prompt_with_data(message, state, message.caption)
    else:
        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–µ—Ç - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –∏ –∂–¥–µ–º —Ç–µ–∫—Å—Ç
        await state.update_data(images=images)
        
        if len(images) >= MAX_IMAGES_PER_REQUEST:
            await message.answer(
                messages.IMAGES_MAX_REACHED.format(count=len(images))
            )
        else:
            await message.answer(
                f"üì∏ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(images)}/{MAX_IMAGES_PER_REQUEST} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.\n\n‚úçÔ∏è –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:"
            )


async def handle_prompt_with_data(message: Message, state: FSMContext, prompt: str) -> None:
    """–û–±—â–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–º–ø—Ç–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏"""
    prompt = prompt.strip()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–∞
    if len(prompt) > MAX_PROMPT_LENGTH:
        await message.answer(
            messages.PROMPT_TOO_LONG.format(
                max_length=MAX_PROMPT_LENGTH,
                current_length=len(prompt)
            )
        )
        return
    
    if len(prompt) < 3:
        await message.answer(messages.PROMPT_TOO_SHORT)
        return
    
    await state.update_data(prompt=prompt)
    
    data = await state.get_data()
    images = data.get('images', [])
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
        session_id = await payment_service.create_session(
            message.from_user.id, 
            images, 
            prompt
        )
        await state.update_data(session_id=session_id)
        
        if TEST_MODE:
            # –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º - —Å—Ä–∞–∑—É –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
            await message.answer(
                messages.TEST_MODE_MESSAGE,
                parse_mode="HTML"
            )
            await process_generation(message, state, session_id)
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_balance = await balance_service.get_balance(message.from_user.id)
            
            if user_balance > 0:
                # –ï—Å—Ç—å –±–∞–ª–∞–Ω—Å - —Å–ø–∏—Å—ã–≤–∞–µ–º –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º
                success = await balance_service.deduct_balance(message.from_user.id, 1)
                if success:
                    await message.answer(
                        f"‚úÖ –°–ø–∏—Å–∞–Ω–∞ 1 –≥–µ–Ω–µ—Ä–∞—Ü–∏—è. –û—Å—Ç–∞–ª–æ—Å—å: {user_balance - 1}"
                    )
                    await process_generation(message, state, session_id)
                else:
                    # –ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∏—Å–∞—Ç—å (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è?)
                    await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                    await state.clear()
            else:
                # –ù–µ—Ç –±–∞–ª–∞–Ω—Å–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–∫–µ—Ç—ã
                await state.set_state(ImageGenerationStates.choosing_package)
                await show_package_options(message)
    
    except ValueError as e:
        await message.answer(f"‚ùå {str(e)}")
    except (AttributeError, TypeError, KeyError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏: {e}")
        await message.answer(messages.ERROR_SESSION_CREATE)


@generation_router.message(ImageGenerationStates.waiting_for_prompt, F.content_type == ContentType.TEXT)
async def handle_prompt(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞"""
    await handle_prompt_with_data(message, state, message.text)


@generation_router.message(ImageGenerationStates.waiting_for_prompt)
async def wrong_content_type(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    await message.answer(
        "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º."
    )

@generation_router.message(F.successful_payment)
async def process_successful_payment(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
    payment = message.successful_payment
    payload = payment.invoice_payload
    payment_charge_id = payment.telegram_payment_charge_id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –ø–ª–∞—Ç–µ–∂–∞
    if payload.startswith("package:"):
        # –≠—Ç–æ –ø–æ–∫—É–ø–∫–∞ –ø–∞–∫–µ—Ç–∞
        parts = payload.split(":")
        session_id = parts[1]
        package_size = int(parts[2])
        
        # –ü–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å
        new_balance = await balance_service.process_package_purchase(
            message.from_user.id,
            package_size,
            payment_charge_id
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
        await payment_service.save_payment(
            session_id=session_id,
            user_id=message.from_user.id,
            payment_charge_id=payment_charge_id,
            amount=payment.total_amount
        )
        
        await message.answer(
            f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞!\n\n"
            f"üíé –î–æ–±–∞–≤–ª–µ–Ω–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {package_size}\n"
            f"üìä –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {new_balance}\n\n"
            f"üé® –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é..."
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
        await process_generation(message, state, session_id)
    else:
        # –≠—Ç–æ –æ–±—ã—á–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –∑–∞ –æ–¥–Ω—É –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
        session_id = payload
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
        await payment_service.save_payment(
            session_id=session_id,
            user_id=message.from_user.id,
            payment_charge_id=payment_charge_id,
            amount=GENERATION_PRICE
        )
        
        await message.answer(messages.PAYMENT_RECEIVED)
        await process_generation(message, state, session_id)


async def process_generation(message: Message, state: FSMContext, session_id: str) -> None:
    """–î–æ–±–∞–≤–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤ –æ—á–µ—Ä–µ–¥—å"""
    session = await payment_service.get_session(session_id)
    if not session:
        await message.answer(messages.ERROR_SESSION_NOT_FOUND)
        await state.clear()
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
    queue_id = await queue_service.add_to_queue(session_id, message.from_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ –æ—á–µ—Ä–µ–¥–∏
    queue_position = await queue_service.get_queue_position(session_id)
    
    if queue_position and queue_position > 1:
        await message.answer(
            messages.GENERATION_QUEUED.format(position=queue_position)
        )
    else:
        await message.answer(messages.GENERATION_STARTED)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    await state.update_data(
        queue_id=queue_id,
        chat_id=message.chat.id,
        session_id=session_id
    )
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –Ω–æ –Ω–µ —É–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é - –æ–Ω–∞ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞ –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    await state.set_state(None)

@generation_router.message(ImageGenerationStates.waiting_for_prompt)
async def wrong_content_prompt(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –ø—Ä–æ–º–ø—Ç–∞"""
    await message.answer(messages.WRONG_CONTENT_PROMPT)


async def show_package_options(message: Message) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏"""
    await message.answer(
        "üí≥ <b>–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è:\n\n"
        "üí° <i>–ß–µ–º –±–æ–ª—å—à–µ –ø–∞–∫–µ—Ç, —Ç–µ–º –≤—ã–≥–æ–¥–Ω–µ–µ —Ü–µ–Ω–∞!</i>",
        reply_markup=get_package_keyboard(),
        parse_mode="HTML"
    )


@generation_router.callback_query(ImageGenerationStates.choosing_package, F.data.startswith("package:"))
async def handle_package_selection(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–∞–∫–µ—Ç–∞"""
    await callback.answer()
    
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback
    parts = callback.data.split(":")
    
    if parts[1] == "cancel":
        await callback.message.edit_text("‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        await state.clear()
        return
    
    package_size = int(parts[1])
    package_price = int(parts[2])
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    session_id = data.get('session_id')
    
    if not session_id:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞: —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        await state.clear()
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–∞–∫–µ—Ç–∞
    await state.update_data(
        package_size=package_size,
        package_price=package_price
    )
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å –¥–ª—è –ø–∞–∫–µ—Ç–∞
    await callback.message.edit_text(f"–°–æ–∑–¥–∞—é –∏–Ω–≤–æ–π—Å –¥–ª—è –ø–∞–∫–µ—Ç–∞ {package_size} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π...")
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–ª–∞—Ç—ã
    await state.set_state(ImageGenerationStates.waiting_for_payment)
    
    # –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∏–Ω–≤–æ–π—Å –¥–ª—è –ø–∞–∫–µ—Ç–∞
    await payment_service.create_package_invoice(
        callback.message,
        session_id,
        package_size,
        package_price
    )